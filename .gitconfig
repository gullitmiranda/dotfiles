# set your user tokens as enivornment variables, such as ~/.secrets
# See the README for examples.
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[alias]
  # add
  a = add # add
  chunkyadd = add --patch # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save snapshot: $(date) && git stash apply stash@{0}
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -vv # branch (verbose)

  # commit
  c = commit -m # commit with message
  ca = commit -am # commit all with message
  ci = commit # commit
  amend = commit --amend # ammend your last commit
  ammend = commit --amend # ammend your last commit

  # checkout
  co = checkout # checkout
  nb = checkout -b # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x # grab a change from a branch

  # diff
  d = diff # diff unstaged changes
  dc = diff --cached # diff staged changes
  last = diff HEAD^ # diff last committed change
  wat = whatchanged -p --abbrev-commit --pretty=medium

  # log
  l = log --graph --date=short
  log = log --decorate
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  changelog = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  tr = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  graph = log --graph --date-order -C -M --pretty=format:'<%h> %ad [%an] %Cgreen%d%Creset %s' --all --date=short
  today = log --since=midnight --author='Gullit Miranda' --oneline

  # pull
  pl = pull # pull

  # push
  ps = push # push

  # rebase
  rc = rebase --continue # continue rebase
  rs = rebase --skip # skip rebase

  # remote
  r = remote -v # show remotes (verbose)
  nuke  = "!f() { git push --delete $1 $2; git branch -d $2; }; f"
  nukef = "!f() { git push --delete $1 $2; git branch -D $2; }; f"

  # reset
  unstage = reset HEAD # remove files from index (tracking)
  uncommit = reset --soft HEAD^ # go back before last commit, with files in uncommitted state
  filelog = log -u # show changes to a file
  mt = mergetool # fire up the merge tool
  reset-master = update-ref refs/heads/master refs/remotes/origin/master

  # stash
  ss = stash # stash changes
  sl = stash list # list stashes
  sa = stash apply # apply stash (restore changes)
  sd = stash drop # drop stashes (destory changes)

  # status
  s = status # status
  st = status -sb
  stat = status # status

  # tag
  t = tag -n # show tags with <n> lines of each tag message

  # GitHub Pull Request Managment - https://gist.github.com/gnarf/5406589#file-add-git-pr-alias-sh
	pr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	permission-reset = !git diff -p -R | grep -E \"^(diff|(old|new) mode)\" | git apply

  # Git pull submodules
	spull = "!__git_spull() { git pull \"$@\" && git submodule sync --recursive && git submodule update --init --recursive; }; __git_spull"
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
[mergetool "mvimdiff"]
  cmd = mvim -c 'Gdiff' $MERGED # use fugitive.vim for 3-way merge
  keepbackup = false
[merge]
  summary = true
  verbosity = 1
	tool = code
[apply]
  whitespace = nowarn
[branch]
	autoSetupMerge = always
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = current
  # default = tracking
[core]
  autocrlf = false
  # editor = subl -n -w
	editor = vim
	excludesfile = $HOME/.gitignore
	ignorecase = false
[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
        algorithm = patience
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
	enabled = false
[include]
  path = .gitconfig.user
[user]
	name = Gullit Miranda
	email = gullitmiranda@gmail.com
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "media"]
	clean = git media clean %f
	smudge = git media smudge %f
	required = true
[credential]
	helper = osxkeychain
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[commit]
	template = $HOME/.stCommitMsg
[am]
	threeWay = true
[http]
	sslVerify = true
[gc]
	autoDetach = false
[status]
	submoduleSummary = true
[pull]
	default = current
