#!/bin/bash

# Parse arguments for debug flag
DEBUG=0
ACCOUNT=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --debug)
      DEBUG=1
      shift
      ;;
    --account)
      ACCOUNT="$2"
      shift 2
      ;;
    *)
      break
      ;;
  esac
done

# Enable debug if GIT_TRACE is set
if [[ "${GIT_TRACE}" == "1" ]]; then
  DEBUG=1
fi

# Determine the log file path based on the operating system
if [[ "$(uname || true)" == "Darwin" ]]; then
  # macOS
  logfile="$HOME/Library/Logs/git-credential-1password.log"
else
  # Linux or other systems
  logfile="$HOME/.local/log/git-credential-1password.log"
fi

# Override logfile if GIT_CREDENTIAL_1PASSWORD_LOG_FILE is set
if [[ -n "${GIT_CREDENTIAL_1PASSWORD_LOG_FILE}" ]]; then
  logfile="${GIT_CREDENTIAL_1PASSWORD_LOG_FILE}"
fi

reset_log() {
  if [[ "${DEBUG}" == "1" ]]; then
    mkdir -p "$(dirname "${logfile}")"
    echo "" >"${logfile}"
  fi
}

log() {
  if [[ "${DEBUG}" == "1" ]]; then
    echo "$*" >>"${logfile}"
  fi
}

USAGE_STRING=$(
  cat <<EOF
Usage:
  git-credential-1password [--debug] [--account <account>] <secret_reference> get

  The script expects input via stdin with protocol and host information:
    printf "protocol=https\nhost=github.com\npath=org_name/repo\n\n" | \\
      git-credential-1password --account work "op://Work/GitHub PAT/password" get

Options:
  --debug            Enable debug logging
  --account <name>   Use specific 1Password account

Setup:
  Examples of how to configure git to use this script:
    # Reset any previous credential helper
    git config --global credential.helper ""

    # Configure credentials per host/organization
    # Personal GitHub
    git config --global 'credential "https://github.com".helper' \\
      "!/path/to/git-credential-1password \"op://Personal/GitHub PAT/password\""

    # Work GitHub
    git config --global 'credential "https://github.com/org_name".useHttpPath' true
    git config --global 'credential "https://github.com/org_name".helper' \\
      "!/path/to/git-credential-1password --account work \"op://Work/GitHub PAT/password\""

  Expected .gitconfig settings:
    # Personal GitHub
    [credential "https://github.com"]
      helper = 
      helper = "!/path/to/git-credential-1password \"op://Personal/GitHub PAT/password\""

    # Work GitHub
    [credential "https://github.com/org_name"]
      useHttpPath = true
      helper = 
      helper = "!/path/to/git-credential-1password --account work \"op://Work/GitHub PAT/password\""

Requirements:
  This script requires the 1Password CLI to be installed and configured.
  More info: https://support.1password.com/command-line-getting-started/

Debugging:
  Debug logs can be enabled in two ways:
  1. Using the --debug flag
  2. Setting GIT_TRACE=1 environment variable

  By default, logs are written to:
  - macOS: ~/Library/Logs/git-credential-1password.log
  - Linux: ~/.local/log/git-credential-1password.log

  The log file location can be overridden by setting GIT_CREDENTIAL_1PASSWORD_LOG_FILE.

  Example with debug:
    printf "protocol=https\nhost=github.com\n\n" | \\
      git-credential-1password --debug "op://Personal/GitHub PAT/password" get

EOF
)

if ! command -v op &>/dev/null; then
  echo "1Password CLI could not be found"
  echo "Please install it following the instructions at https://support.1password.com/command-line-getting-started/"
  exit 1
fi

reset_log
log "<<< Start git-credential-1password >>>"
log "args:"
for arg in "$@"; do
  printf -v quoted_arg '%q' "$arg"
  log "  - ${quoted_arg}"
done

# Main logic
############

# Get all arguments except the last one (which should be "get")
args=("$@")
num_args=${#args[@]}

if [[ $num_args -eq 0 ]]; then
  echo "$USAGE_STRING"
  exit 1
fi

last_arg="${args[$((num_args - 1))]}"
unset "args[$((num_args - 1))]"
op_args=("${args[@]}")

if [[ $last_arg == "get" ]]; then
  log "Command: get"
  log "op args: ${op_args[*]}"

  while IFS='=' read -r key value; do
    log "Read line: ${key}=${value}"

    case "${key}" in
    protocol) protocol="${value}" ;;
    *)
      # Ignore unknown keys
      ;;
    esac
  done

  if [[ $protocol == "https" ]]; then
    log "Protocol is HTTPS"

    op_cmd=(op read)
    if [[ -n "$ACCOUNT" ]]; then
      op_cmd+=(--account "$ACCOUNT")
    fi
    op_cmd+=("${op_args[@]}")

    token_or_error=$("${op_cmd[@]}" 2>&1)
    status_code=$?
    if [[ $status_code -ne 0 ]]; then
      echo -e "Failed to retrieve the secret from 1Password using the arguments: \"${op_args[*]}\"."
      echo -e "Please ensure the arguments are correct."
      echo -e "Detailed error: $token_or_error"
      log "Error retrieving token: $token_or_error"
      exit "$status_code"
    fi

    log "Token retrieved successfully (masked for security)"
    echo "username=oauth2"
    echo "password=$token_or_error"
  fi
else
  echo "$USAGE_STRING"
fi
log "<<< End git-credential-1password >>>"
